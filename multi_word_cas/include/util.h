#pragma once

#include <endian.h>
#include <stdint.h>
#include <string.h>

#define FOREACH_IN_ARRAY(array_, item_, len_)                                                                          \
  for (uint32_t idx = 0; idx == 0; ++idx)                                                                              \
    for (__auto_type item_ = array_ + idx; idx < len_; item_ = array_ + ++idx)

uint32_t busy_spin_for(uint32_t);
int join_all(void *threads, uint32_t thread_count, uint32_t millis_timeout);
int print_mem(void *start, uint32_t bytes, char* buffer);

// https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogIEEE64Float
// WARNING : fails for input 0
static uint32_t magical_get_high_pos_bit_set(uint32_t mask) {
  union {
    unsigned int u[2];
    double d;
  } t;

  t.u[__FLOAT_WORD_ORDER == __LITTLE_ENDIAN] = 0x43300000;
  t.u[__FLOAT_WORD_ORDER != __LITTLE_ENDIAN] = mask;
  t.d -= 4503599627370496.0;
  return (t.u[__FLOAT_WORD_ORDER == __LITTLE_ENDIAN] >> 20) - 0x3FF;
}

// WARNING : fails for input 255
static uint32_t get_all_bits_unset_positions_ordered(uintmax_t mask, uint32_t mask_len, uint8_t *positions) {
  static uint8_t lookup_pos[] = {
    0, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 0, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 7, 0, 1, 3, 4, 5, 6, 7, 1, 3,  4,
    5, 6, 7, 0, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 0, 1, 2, 4, 5, 6, 7, 1, 2, 4, 5, 6, 7, 0, 2, 4, 5, 6, 7, 2, 4, 5, 6,  7,
    0, 1, 4, 5, 6, 7, 1, 4, 5, 6, 7, 0, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 5, 6, 7, 1, 2, 3, 5, 6, 7, 0, 2, 3, 5,  6,
    7, 2, 3, 5, 6, 7, 0, 1, 3, 5, 6, 7, 1, 3, 5, 6, 7, 0, 3, 5, 6, 7, 3, 5, 6, 7, 0, 1, 2, 5, 6, 7, 1, 2, 5, 6, 7,  0,
    2, 5, 6, 7, 2, 5, 6, 7, 0, 1, 5, 6, 7, 1, 5, 6, 7, 0, 5, 6, 7, 5, 6, 7, 0, 1, 2, 3, 4, 6, 7, 1, 2, 3, 4, 6, 7,  0,
    2, 3, 4, 6, 7, 2, 3, 4, 6, 7, 0, 1, 3, 4, 6, 7, 1, 3, 4, 6, 7, 0, 3, 4, 6, 7, 3, 4, 6, 7, 0, 1, 2, 4, 6, 7, 1,  2,
    4, 6, 7, 0, 2, 4, 6, 7, 2, 4, 6, 7, 0, 1, 4, 6, 7, 1, 4, 6, 7, 0, 4, 6, 7, 4, 6, 7, 0, 1, 2, 3, 6, 7, 1, 2, 3,  6,
    7, 0, 2, 3, 6, 7, 2, 3, 6, 7, 0, 1, 3, 6, 7, 1, 3, 6, 7, 0, 3, 6, 7, 3, 6, 7, 0, 1, 2, 6, 7, 1, 2, 6, 7, 0, 2,  6,
    7, 2, 6, 7, 0, 1, 6, 7, 1, 6, 7, 0, 6, 7, 6, 7, 0, 1, 2, 3, 4, 5, 7, 1, 2, 3, 4, 5, 7, 0, 2, 3, 4, 5, 7, 2, 3,  4,
    5, 7, 0, 1, 3, 4, 5, 7, 1, 3, 4, 5, 7, 0, 3, 4, 5, 7, 3, 4, 5, 7, 0, 1, 2, 4, 5, 7, 1, 2, 4, 5, 7, 0, 2, 4, 5,  7,
    2, 4, 5, 7, 0, 1, 4, 5, 7, 1, 4, 5, 7, 0, 4, 5, 7, 4, 5, 7, 0, 1, 2, 3, 5, 7, 1, 2, 3, 5, 7, 0, 2, 3, 5, 7, 2,  3,
    5, 7, 0, 1, 3, 5, 7, 1, 3, 5, 7, 0, 3, 5, 7, 3, 5, 7, 0, 1, 2, 5, 7, 1, 2, 5, 7, 0, 2, 5, 7, 2, 5, 7, 0, 1, 5,  7,
    1, 5, 7, 0, 5, 7, 5, 7, 0, 1, 2, 3, 4, 7, 1, 2, 3, 4, 7, 0, 2, 3, 4, 7, 2, 3, 4, 7, 0, 1, 3, 4, 7, 1, 3, 4, 7,  0,
    3, 4, 7, 3, 4, 7, 0, 1, 2, 4, 7, 1, 2, 4, 7, 0, 2, 4, 7, 2, 4, 7, 0, 1, 4, 7, 1, 4, 7, 0, 4, 7, 4, 7, 0, 1, 2,  3,
    7, 1, 2, 3, 7, 0, 2, 3, 7, 2, 3, 7, 0, 1, 3, 7, 1, 3, 7, 0, 3, 7, 3, 7, 0, 1, 2, 7, 1, 2, 7, 0, 2, 7, 2, 7, 0,  1,
    7, 1, 7, 0, 7, 7, 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 0, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 0, 1, 3, 4, 5, 6, 1,  3,
    4, 5, 6, 0, 3, 4, 5, 6, 3, 4, 5, 6, 0, 1, 2, 4, 5, 6, 1, 2, 4, 5, 6, 0, 2, 4, 5, 6, 2, 4, 5, 6, 0, 1, 4, 5, 6,  1,
    4, 5, 6, 0, 4, 5, 6, 4, 5, 6, 0, 1, 2, 3, 5, 6, 1, 2, 3, 5, 6, 0, 2, 3, 5, 6, 2, 3, 5, 6, 0, 1, 3, 5, 6, 1, 3,  5,
    6, 0, 3, 5, 6, 3, 5, 6, 0, 1, 2, 5, 6, 1, 2, 5, 6, 0, 2, 5, 6, 2, 5, 6, 0, 1, 5, 6, 1, 5, 6, 0, 5, 6, 5, 6, 0,  1,
    2, 3, 4, 6, 1, 2, 3, 4, 6, 0, 2, 3, 4, 6, 2, 3, 4, 6, 0, 1, 3, 4, 6, 1, 3, 4, 6, 0, 3, 4, 6, 3, 4, 6, 0, 1, 2,  4,
    6, 1, 2, 4, 6, 0, 2, 4, 6, 2, 4, 6, 0, 1, 4, 6, 1, 4, 6, 0, 4, 6, 4, 6, 0, 1, 2, 3, 6, 1, 2, 3, 6, 0, 2, 3, 6,  2,
    3, 6, 0, 1, 3, 6, 1, 3, 6, 0, 3, 6, 3, 6, 0, 1, 2, 6, 1, 2, 6, 0, 2, 6, 2, 6, 0, 1, 6, 1, 6, 0, 6, 6, 0, 1, 2,  3,
    4, 5, 1, 2, 3, 4, 5, 0, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 3, 4, 5, 1, 3, 4, 5, 0, 3, 4, 5, 3, 4, 5, 0, 1, 2, 4, 5,  1,
    2, 4, 5, 0, 2, 4, 5, 2, 4, 5, 0, 1, 4, 5, 1, 4, 5, 0, 4, 5, 4, 5, 0, 1, 2, 3, 5, 1, 2, 3, 5, 0, 2, 3, 5, 2, 3,  5,
    0, 1, 3, 5, 1, 3, 5, 0, 3, 5, 3, 5, 0, 1, 2, 5, 1, 2, 5, 0, 2, 5, 2, 5, 0, 1, 5, 1, 5, 0, 5, 5, 0, 1, 2, 3, 4,  1,
    2, 3, 4, 0, 2, 3, 4, 2, 3, 4, 0, 1, 3, 4, 1, 3, 4, 0, 3, 4, 3, 4, 0, 1, 2, 4, 1, 2, 4, 0, 2, 4, 2, 4, 0, 1, 4,  1,
    4, 0, 4, 4, 0, 1, 2, 3, 1, 2, 3, 0, 2, 3, 2, 3, 0, 1, 3, 1, 3, 0, 3, 3, 0, 1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 0, 255
  };
  static uint8_t lookup_len[]
      = { 8, 7, 7, 6, 7, 6, 6, 5, 7, 6, 6, 5, 6, 5, 5, 4, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3, 7, 6, 6, 5, 6,
          5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5,
          5, 4, 5, 4, 4, 3, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3,
          2, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3, 6, 5, 5, 4,
          5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4, 3, 4, 3, 3, 2, 4,
          3, 3, 2, 3, 2, 2, 1, 6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2,
          2, 1, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0 };
  static uint16_t lookup_off[]
      = { 0,    8,    15,   22,   28,   35,   41,   47,   52,  59,  65,  71,  76,  82,  87,  92,   96,   103,  109,
          115,  120,  126,  131,  136,  140,  146,  151,  156, 160, 165, 169, 173, 176, 183, 189,  195,  200,  206,
          211,  216,  220,  226,  231,  236,  240,  245,  249, 253, 256, 262, 267, 272, 276, 281,  285,  289,  292,
          297,  301,  305,  308,  312,  315,  318,  320,  327, 333, 339, 344, 350, 355, 360, 364,  370,  375,  380,
          384,  389,  393,  397,  400,  406,  411,  416,  420, 425, 429, 433, 436, 441, 445, 449,  452,  456,  459,
          462,  464,  470,  475,  480,  484,  489,  493,  497, 500, 505, 509, 513, 516, 520, 523,  526,  528,  533,
          537,  541,  544,  548,  551,  554,  556,  560,  563, 566, 568, 571, 573, 575, 576, 583,  589,  595,  600,
          606,  611,  616,  620,  626,  631,  636,  640,  645, 649, 653, 656, 662, 667, 672, 676,  681,  685,  689,
          692,  697,  701,  705,  708,  712,  715,  718,  720, 726, 731, 736, 740, 745, 749, 753,  756,  761,  765,
          769,  772,  776,  779,  782,  784,  789,  793,  797, 800, 804, 807, 810, 812, 816, 819,  822,  824,  827,
          829,  831,  832,  838,  843,  848,  852,  857,  861, 865, 868, 873, 877, 881, 884, 888,  891,  894,  896,
          901,  905,  909,  912,  916,  919,  922,  924,  928, 931, 934, 936, 939, 941, 943, 944,  949,  953,  957,
          960,  964,  967,  970,  972,  976,  979,  982,  984, 987, 989, 991, 992, 996, 999, 1002, 1004, 1007, 1009,
          1011, 1012, 1015, 1017, 1019, 1020, 1022, 1023, 1024 };
  uint32_t len = 0;

  for (uint32_t i = 0; i < mask_len; i += 8) {
    uint8_t fragment = mask >> (uint8_t)i;
    memcpy(positions + len, lookup_pos + lookup_off[fragment], lookup_len[fragment]);
    for (uint32_t j = 0; j < lookup_len[fragment]; positions[len + j++] += i)
      ;
    len += lookup_len[fragment];
  }

  uint8_t overflow = (mask >> (uint8_t)(8 * (mask_len / 8))) | ~((1 << (uint8_t)(mask_len % 8)) - 1);
  len -= lookup_len[overflow];
  return len;
}
